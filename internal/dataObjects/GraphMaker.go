package dataObjects

import (
	"github.com/go-echarts/go-echarts/v2/charts"
	"github.com/go-echarts/go-echarts/v2/opts"
	"math/rand"
	global "sysbench-graph-creator/internal/global"
)

//https://github.com/go-echarts/go-echarts

type GraphGenerator struct {
	configuration global.Configuration
	producers     []Producer
}

func (Graph *GraphGenerator) Init(inConfig global.Configuration, inProducers []Producer) {
	Graph.producers = inProducers
	Graph.configuration = inConfig
}

func (Graph *GraphGenerator) Test() *charts.Bar {
	itemCnt := 7
	weeks := []string{"Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"}

	bar := charts.NewBar()
	bar.SetGlobalOptions(
		charts.WithTitleOpts(opts.Title{
			Title:    "My first bar chart generated by go-echarts",
			Subtitle: "It's extremely easy to use, right?",
		}),
		charts.WithToolboxOpts(opts.Toolbox{
			Right: "20%",
			Feature: &opts.ToolBoxFeature{
				SaveAsImage: &opts.ToolBoxFeatureSaveAsImage{
					Type:  "jpg",
					Title: "Anything you want",
				},
				DataView: &opts.ToolBoxFeatureDataView{
					Title: "DataView",
					Lang:  []string{"data view", "turn off", "refresh"},
				},
			}}))

	bar.SetXAxis(weeks).
		AddSeries("Category A", Graph.generateBarItems(itemCnt)).
		AddSeries("Category B", Graph.generateBarItems(itemCnt))
	return bar

}
func (Graph *GraphGenerator) generateBarItems(itemCnt int) []opts.BarData {
	items := make([]opts.BarData, 0)
	for i := 0; i < itemCnt; i++ {
		items = append(items, opts.BarData{Value: rand.Intn(300)})
	}
	return items
}
